from sklearn.cluster import KMeans
from sklearn import preprocessing
from sklearn.mixture import GaussianMixture
from sklearn.datasets import load_iris
import sklearn.metrics as sm
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
datas = datasets.load_iris()
#display(data)
X=pd.DataFrame(datas.data)
X.columns=['Sepal_Length','Sepal_Width','Petal_Length','Petal_Width']
y=pd.DataFrame(datas.target)
y.columns=['Targets']
display(X)
# REAL PLOT for original values
#petal_Length
plt.figure(figsize=(14,14))
colormap=np.array(['red','lime','black'])
#plt.subplot(1,3,1)
plt.subplot(2,2,2)
plt.scatter(X.Petal_Length,X.Petal_Width,c=colormap[y.Targets],s=40)
plt.xlabel('Petal Length')
plt.ylabel('Petal width')
plt.title('Real')
# K-PLOT
#plt.subplot(1,3,2)
plt.figure(figsize=(14,14))
colormap=np.array(['red','blue','black'])
plt.subplot(2,2,2)
model=KMeans(n_clusters=3)
model.fit(X)
predY=np.choose(model.labels_,[0,1,2]).astype(np.int64)
plt.scatter(X.Petal_Length,X.Petal_Width,c=colormap[predY],s=40)
plt.xlabel('Petal Length')
plt.ylabel('Petal width')
plt.title('KMeans')
# GMM PLOT for petal_length
scaler=preprocessing.StandardScaler()
scaler.fit(X)
xsa=scaler.transform(X)
xs=pd.DataFrame(xsa,columns=X.columns)
gmm=GaussianMixture(n_components=3)
gmm.fit(xs)

plt.figure(figsize=(14,14))
colormap=np.array(['red','green','black'])

y_cluster_gmm=gmm.predict(xs)
#plt.subplot(1,3,3)
plt.subplot(2,2,1)
plt.scatter(X.Petal_Length,X.Petal_Width,c=colormap[y_cluster_gmm],s=40)
plt.xlabel('Petal Length')
plt.ylabel('Petal width')
plt.title('GMM Classification')
